import os
import logging
import threading
from flask import Flask
import google.generativeai as genai

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler,
    ConversationHandler
)

# --- –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

TELEGRAM_BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')

if not TELEGRAM_BOT_TOKEN or not GEMINI_API_KEY:
    raise ValueError("–ü–û–ú–ò–õ–ö–ê: API-–∫–ª—é—á—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –Ω–∞ Render.")

genai.configure(api_key=GEMINI_API_KEY)
gemini_model = genai.GenerativeModel('gemini-pro')

SELECTING_PLATFORM, GETTING_TOPIC = range(2)
user_data_storage = {}

# --- –í–µ–±-—Å–µ—Ä–≤–µ—Ä Flask ---
app = Flask(__name__)

@app.route('/')
def home():
    return "Web server is running. Bot is active."

# --- –õ–æ–≥—ñ–∫–∞ Telegram-–±–æ—Ç–∞ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton("TikTok üé¨", callback_data='TikTok'), InlineKeyboardButton("Instagram üì∏", callback_data='Instagram')],
        [InlineKeyboardButton("YouTube üé•", callback_data='YouTube'), InlineKeyboardButton("Telegram üí¨", callback_data='Telegram')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –í—ñ—Ç–∞—é —É AI Content Generator!\n\n"
        "–Ø –¥–æ–ø–æ–º–æ–∂—É —Å—Ç–≤–æ—Ä—é–≤–∞—Ç–∏ –≤—ñ—Ä–∞–ª—å–Ω—ñ —ñ–¥–µ—ó —Ç–∞ –æ–ø–∏—Å–∏ –¥–ª—è –ø–æ—Å—Ç—ñ–≤.\n\n"
        "–û–±–µ—Ä–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –∑ —è–∫–æ—ó –ø–æ—á–Ω–µ–º–æ:",
        reply_markup=reply_markup
    )
    return SELECTING_PLATFORM

async def platform_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    platform = query.data
    user_data_storage[user_id] = {'platform': platform}
    await query.edit_message_text(
        text=f"–ß—É–¥–æ–≤–æ, –æ–±—Ä–∞–Ω–æ {platform}! ‚ú®\n\n–¢–µ–ø–µ—Ä –≤–∫–∞–∂–∏ —Ç–µ–º—É –∞–±–æ –Ω—ñ—à—É (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —Ñ—ñ—Ç–Ω–µ—Å, –ø–æ–¥–æ—Ä–æ–∂—ñ, –º–æ—Ç–∏–≤–∞—Ü—ñ—è, –∫—Ä–∏–ø—Ç–∞)."
    )
    return GETTING_TOPIC

async def generate_content(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_id = update.effective_user.id
    topic = update.message.text
    if user_id not in user_data_storage:
        await update.message.reply_text("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ—á–Ω—ñ—Ç—å —Å–ø–æ—á–∞—Ç–∫—É –∑ –∫–æ–º–∞–Ω–¥–∏ /start.")
        return ConversationHandler.END
    platform = user_data_storage[user_id]['platform']
    await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä—É—é —ñ–¥–µ—ó... –¶–µ –º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ –¥–æ 30 —Å–µ–∫—É–Ω–¥.")
    try:
        prompt = (
            f"–°—Ç–≤–æ—Ä–∏ 3 —É–Ω—ñ–∫–∞–ª—å–Ω—ñ —ñ–¥–µ—ó –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç—É –≤ —Å–æ—Ü—ñ–∞–ª—å–Ω—ñ–π –º–µ—Ä–µ–∂—ñ {platform} –Ω–∞ —Ç–µ–º—É '{topic}'. "
            f"–î–ª—è –∫–æ–∂–Ω–æ—ó —ñ–¥–µ—ó –Ω–∞–¥–∞–π: –ø—Ä–∏–≤–∞–±–ª–∏–≤–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ü–¥–µ—è), –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å/—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—Å—Ç—É (–¢–µ–∫—Å—Ç) "
            f"—Ç–∞ –¥–æ–±—ñ—Ä–∫—É –∑ 5-7 —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–∏—Ö —Ö–µ—à—Ç–µ–≥—ñ–≤ (–•–µ—à—Ç–µ–≥–∏). "
            f"–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥–∞–π —á—ñ—Ç–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ—é, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ –º–∞—Ä–∫–µ—Ä–∏ '1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£' –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ –±–ª–æ–∫—É."
            f"–§–æ—Ä–º–∞—Ç—É–π –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Ç–∞–∫:\n"
            f"1Ô∏è‚É£ **–Ü–¥–µ—è:** [—Ç—É—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫]\n"
            f"**–¢–µ–∫—Å—Ç:** [—Ç—É—Ç —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç—É]\n"
            f"**–•–µ—à—Ç–µ–≥–∏:** [—Ç—É—Ç —Ö–µ—à—Ç–µ–≥–∏]"
        )
        response = gemini_model.generate_content(prompt)
        final_message = f"‚ú® –û—Å—å —Ç–≤–æ—ó —ñ–¥–µ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É –¥–ª—è **{platform}** –Ω–∞ —Ç–µ–º—É **{topic}**:\n\n{response.text}"
        await update.message.reply_text(final_message, parse_mode='Markdown')
        await update.message.reply_text("–©–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç, –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /new.")
    except Exception as e:
        logger.error(f"Error generating content with Gemini: {e}")
        await update.message.reply_text("üòî –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∫–æ–Ω—Ç–µ–Ω—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –∑–∞–ø–∏—Ç –∞–±–æ –ø–æ–≤—Ç–æ—Ä—ñ—Ç—å –ø—ñ–∑–Ω—ñ—à–µ.")
    if user_id in user_data_storage:
        del user_data_storage[user_id]
    return ConversationHandler.END

async def new_generation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–ü–æ—á–∏–Ω–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É!")
    return await start(update, context)

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text("–î—ñ–∞–ª–æ–≥ —Å–∫–∞—Å–æ–≤–∞–Ω–æ. –©–æ–± –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É, –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å /start.")
    if update.effective_user.id in user_data_storage:
        del user_data_storage[update.effective_user.id]
    return ConversationHandler.END

def run_bot():
    """–ó–∞–ø—É—Å–∫–∞—î Telegram-–±–æ—Ç–∞."""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CommandHandler('new', new_generation)],
        states={
            SELECTING_PLATFORM: [CallbackQueryHandler(platform_choice)],
            GETTING_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, generate_content)],
        },
        fallbacks=[CommandHandler('cancel', cancel)],
    )
    application.add_handler(conv_handler)
    logger.info("Starting bot polling...")
    application.run_polling()

# --- –í–ê–ñ–õ–ò–í–ê –ó–ú–Ü–ù–ê: –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
# –¶–µ–π –∫–æ–¥ —Ç–µ–ø–µ—Ä –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –æ–¥—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É,
# –≥–∞—Ä–∞–Ω—Ç—É—é—á–∏, —â–æ –ø–æ—Ç—ñ–∫ –∑ –±–æ—Ç–æ–º —Å—Ç–∞—Ä—Ç—É—î –¥–æ —Ç–æ–≥–æ, —è–∫ Render –ø–æ—á–Ω–µ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É.
logger.info("Starting bot thread...")
bot_thread = threading.Thread(target=run_bot)
bot_thread.daemon = True
bot_thread.start()

# Gunicorn –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ –æ–±'—î–∫—Ç 'app' –∑ —Ü—å–æ–≥–æ —Ñ–∞–π–ª—É –¥–ª—è –∑–∞–ø—É—Å–∫—É –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞.

